dadosIdenticacao.tipo_func = 'PROMOTOR MEI';







//busca convenios

const [[conv]] = await db.query(buscaConvenio);

//classificacao
var classificacao;
// if(conv.length === 1){
//     classificacao = conv[0].classificacao_convenio;
// } else {
//      classificacao = 'PADRAO';
// }
console.log(conv)

classificacao = conv.classificacao_convenio;
    
// altera formatação da regra
regra = await regra.split("-")
if(regra.length > 1)  regra = await regra[1];
regra = regra.trim(" ");


var rescal;
var [calc] = await db.query(`select * from tabela_comissao where convenio = '${convenio}' and correntista = '${correntista}' and tipo = '${tipo}' and banco = 'SANTANDER' and regra = '${regra}' and data_vigencia like '%ATUAL%' limit 1;`)
 
if(!calc.length){
    if(classificacao ==="Tabela Pref Rio"){
        [[rescal]] = await db.query(`select * from tabela_comissao where convenio = '${convenio}' and data_vigencia like '%ATUAL%' limit 1;`)  
        

    }else{
        [[rescal]] = await db.query(` select * from tabela_comissao
                                    where convenio = '${convenio}'
                                    and banco = 'SANTANDER'
                                    and regra = '${regra}'
                                    and data_vigencia like '%ATUAL%'
                                    limit 1;`)   
    }
}else{
    rescal = calc;
}
if(!rescal) rescal = 'calculo não encontrado'
if(dadosIdenticacao.tipo_func !== 'PARCEIRO') var pct_parceiro = null;
else var pct_parceiro = rescal.parceiro

let calculado;

if(dadosIdenticacao.tipo_func === 'PARCEIRO'){

    switch(classificacao) {
        case ('Convenios Taxa'):
            var comissao = dadosIdenticacao.convenio_especial;

            if(typeof comissao === 'string') {   
                const x = buscaCalculo(comissao, rescal)
                calculado = (valor_liberado * x )
            }else{
                calculado = (valor_liberado * pct_parceiro * comissao / 100 )
            }
           
            break;
        case ('Gov Minas'):
            calculado = (valor_liberado * pct_parceiro * dadosIdenticacao.governo_minas / 100 ),2
        break;
        case ('Tabela Pref Rio'):
           calculado = (valor_liberado * pct_parceiro * dadosIdenticacao.prefeitura_rio / 100 ),2
        break;
        case ('Multi Bancos'):
            calculado = (valor_liberado * pct_parceiro * dadosIdenticacao.multibanco / 100 ),2
            break;
        default:
            switch(tipo) {
                case('PORTABILIDADE'):                  
                    calculado = (valor_liberado * dadosIdenticacao.convenio_padrao * 0.016 / 100),2
                    break;
                case('PORTABILIDADE COMPETITIVA'):
                    calculado = (valor_liberado * dadosIdenticacao.convenio_padrao * 0.016 / 100 / 2),2
                    break;
                case('NOVO COMP'):
                    calculado = (valor_liberado * dadosIdenticacao.convenio_padrao * 0.0408 / 100 / 2),2
                    break;
                default:
                    calculado = (valor_liberado * dadosIdenticacao.convenio_padrao * 0.0408 / 100),2
            }

    }
     res.send({  
                'inclusa':true,
                'proposta':proposta,
                'nome':dadosIdenticacao.parceiro,
                'valor_liberado':valor_liberado,
                'prazo_contrato':prazo_contrato, 
                'convenio':convenio,
                'tipo':tipo,
                'regra':regra,
                'correntista':correntista,
                'classificacao':classificacao ,
                'dadosIdenticacao':dadosIdenticacao,
                'calculo':rescal,
                'calculado':calculado.toFixed(2)
                })
                } else if(dadosIdenticacao.tipo_func === 'PROMOTOR MEI') {
                    
                    res.send(dadosIdenticacao)

                }   
